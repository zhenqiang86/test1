

user  root;
worker_processes  4;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    charset  utf-8;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 300m;
    sendfile on;
    tcp_nopush     on;
    keepalive_timeout 60;
    tcp_nodelay on;

    proxy_redirect off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    proxy_read_timeout 90;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;

    proxy_cache_path /var/cache/nginx_tracker/cache levels=1:2 keys_zone=http-cache:200m max_size=5g inactive=30d;
    proxy_temp_path /var/cache/nginx_tracker/cache/temp;
    lua_package_path "/usr/local/nginx_tracker/conf/lua/?.lua"; 

    server {
    	listen 8080;
        location /txt {
	    proxy_cache http-cache;
	    proxy_cache_valid 200 304 12h;
	    proxy_cache_valid any 10m;
	    proxy_cache_key $uri$is_args$args;
	    expires 30d;
        }
	
	location /purge(/*) {
	    allow            127.0.0.1;
	    allow            192.168.0.0/16;
	    deny            all;
	    proxy_cache_purge    http-cache   $host$1$is_args$args;
	}

        location ~ /group([0-9a-z]+)/M([0-9a-z]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/(.*) {
            root html/images;
            set $image_root "/usr/local/nginx_tracker/html/images";
            if ($uri ~ "/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/(.*)") {
                set $image_dir "$image_root/$1/$2/$3/$4/";
                set $image_name "$5";
                set $file "$image_dir$image_name";
            }

            if (!-f $file) {
                # 关闭lua代码缓存，方便调试lua脚本
                lua_code_cache off;
                content_by_lua_file "conf/lua/fastdfs.lua";
            }
            #ngx_fastdfs_module;
        }
	
	location @defaultimage {
	    root html;
	    try_files $request_filename /images/default.jpg;
	}
    }
}
